name: Deploy website
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    name: Test code
    strategy:
      matrix:
        test-group:
          - name: Lint code
            run: npm run lint
          - name: Test code
            run: npm run test
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies # This should be commes before the dependices which we trying to cache in all jobs
        with:
          path: ~/.npm # this is the path which has save all dependecies
          key: deps-node-modules-${{ hashfiles('**/package-lock.json') }} #key will be used for retrieving the cache in the future and recreating that folder on the runner machine based on that cache managed by GitHub in the future. But the key also indicates whether the cache should be discarded because it must be recreated
        uses: action/cache@v3 # package-lock.json file in present the code that specifies all the dependencies of this project and the exact versions of these dependencies. And the idea here is that whenever this file changes because we updated a dependency, for example, the hash that will be produced by hash files will not be the same as before. And therefore, we end up with a different hash key indicating to GitHub Actions and this cache action that the currently stored cache should be discarded and not be used, and therefore instead we would reinstall the dependencies.
      - name: Install dependencies
        run: npm ci
  build:
    needs: test
    runs-on: ubuntu-latest
    name: Build and Publish website
    outputs:
      script-file: ${{ steps.publish.outputs.script-file}}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies # This should be commes before the dependices which we trying to cache in all jobs
        with:
          path: ~/.npm # this is the path which has save all dependecies
          key: deps-node-modules-${{ hashfiles('**/package-lock.json') }} #key will be used for retrieving the cache in the future and recreating that folder on the runner machine based on that cache managed by GitHub in the future. But the key also indicates whether the cache should be discarded because it must be recreated
        uses: action/cache@v3
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: Publish
        run : find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    name: Deploy website
    steps:
      - name: Get build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
      - name: output contents
        run: ls
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}" 
      - name: Deploy
        run: echo "Deploying..."